{"version":3,"sources":["Todo.js","App.js","index.js"],"names":["Todo","_ref","todo","toggle","destroy","id","title","isDone","react_default","a","createElement","className","type","onClick","checked","htmlFor","defaultProps","App","state","allToggled","showContent","value","todoes","_this","setState","prevState","map","Object","objectSpread","toggleAll","filter","length","handleChange","event","target","_this2","this","_this$state","resultingList","src_Todo","onSubmit","preventDefault","onChange","placeholder","onKeyDown","key","concat","toConsumableArray","Date","now","href","handleFilterNotDone","handleFilterDone","style","display","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.195d1849.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Todo = ({ todo, toggle, destroy }) => {\n  const { id, title, isDone } = todo;\n\n  return (\n    <li className=\"todo\">\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={id}\n          onClick={() => toggle(id)}\n          checked={isDone}\n        />\n        <label\n          htmlFor={id}\n          className={isDone && 'completed-item'}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => destroy(id)}\n        />\n      </div>\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    idDone: PropTypes.bool.isRequired,\n  }).isRequired,\n  toggle: PropTypes.func,\n  destroy: PropTypes.func,\n};\n\nTodo.defaultProps = {\n  toggle: null,\n  destroy: null,\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\n/*\nconst myStorage = window.localStorage;\n\nwindow.onbeforeunload = closingCode;\nfunction closingCode() {\n  // do something...\n  return null;\n}\n\n */\n\nclass App extends React.Component {\n  state = {\n    allToggled: false,\n    showContent: false,\n    value: '',\n    todoes: [],\n  }\n\n  /*   componentDidMount() {\n      const myLocaleStorage = myStorage.getItem('todoes');\n\n      if (myLocaleStorage === 'undefined') {\n        this.setState({\n          todoes: JSON.parse(myLocaleStorage),\n        })\n      }\n    }\n\n    componentWillUnmount() {\n      myStorage.setItem('todoes', JSON.stringify(this.state.todoes));\n    } */\n\n  toggle = (id) => {\n    this.setState(prevState => ({\n      todoes: prevState.todoes.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          isDone: !todo.isDone,\n        };\n      }),\n    }));\n  }\n\n  toggleAll = () => {\n    this.setState(prevState => ({\n      todoes: prevState.todoes.map((todo) => {\n        if (prevState.allToggled === false) {\n          return {\n            ...todo,\n            isDone: true,\n          };\n        }\n\n        return {\n          ...todo,\n          isDone: false,\n        };\n      }),\n      allToggled: !prevState.allToggled,\n    }));\n  }\n\n  destroy = (id) => {\n    this.setState(prevState => ({\n      todoes: prevState.todoes.filter(todo => todo.id !== id),\n      showContent: !(prevState.todoes.length < 2),\n    }));\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      value: event.target.value,\n    });\n  }\n\n  /*   handleFilterDone = () => {\n      this.setState(prevState => ({\n        todoes: prevState.todoes.filter(todo => (\n          todo.isDone\n        )),\n      }))\n    }\n\n    handleFilterNotDone = () => {\n      this.setState(prevState => ({\n        todoes: prevState.todoes.filter(todo => (\n          !todo.isDone\n        )),\n      }))\n    }\n   */\n\n  render() {\n    const { showContent, todoes, value } = this.state;\n    const resultingList = todoes.length !== 0\n      ? todoes.map(todo => (\n        <Todo todo={todo} toggle={this.toggle} destroy={this.destroy} />\n      ))\n      : '';\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <form onSubmit={event => event.preventDefault()}>\n            <input\n              className=\"new-todo\"\n              onChange={this.handleChange}\n              value={value}\n              placeholder=\"What needs to be done?\"\n              onKeyDown={(event) => {\n                if (event.key === 'Enter') {\n                  this.setState(prevState => ({\n                    todoes: [...prevState.todoes, {\n                      id: Date.now(),\n                      title: prevState.value,\n                      isDone: false,\n                    }],\n                    value: '',\n                    showContent: true,\n                  }));\n                }\n              }}\n            />\n\n          </form>\n\n        </header>\n\n        {showContent === true\n          ? (\n            <div className=\"content-group\">\n\n              <section className=\"main\">\n                <input\n                  type=\"checkbox\"\n                  id=\"toggle-all\"\n                  className=\"toggle-all\"\n                  onClick={this.toggleAll}\n                />\n                <label\n                  htmlFor=\"toggle-all\"\n                >\n                  Mark all as complete\n                </label>\n\n                <ul className=\"todo-list\">\n\n                  {resultingList}\n\n                </ul>\n              </section>\n\n              <footer className=\"footer\">\n                <span className=\"todo-count\">\n                  {`${todoes.filter(todo => (!todo.isDone)).length} items left`}\n                </span>\n\n                <ul className=\"filters\">\n                  <li>\n                    <a\n                      href=\"#/\"\n                      className=\"selected\"\n                    >\n                      All\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#/active\"\n                      onClick={() => this.handleFilterNotDone}\n                    >\n                      Active\n                    </a>\n                  </li>\n\n                  <li>\n                    <a\n                      href=\"#/completed\"\n                      onClick={() => this.handleFilterDone}\n                    >\n                      Completed\n                    </a>\n                  </li>\n                </ul>\n\n                <button\n                  type=\"button\"\n                  className=\"clear-completed\"\n                  style={{ display: 'block' }}\n                />\n              </footer>\n            </div>)\n          : <span></span>}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}